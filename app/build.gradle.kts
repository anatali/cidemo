import org.jetbrains.kotlin.konan.file.File.Companion.userDir

//import org.jetbrains.kotlin.konan.file.File.Companion.userDir

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.7.1/userguide/building_java_projects.html
 */

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    id("org.jetbrains.kotlin.jvm") version "1.3.72"

    // Apply the application plugin to add support for building a CLI application in Java.
    application

    //Gradle plugins for working with Docker containers
    id( "com.palantir.docker" )     version "0.25.0"
    id( "com.palantir.docker-run")  version "0.25.0"
}

repositories {
    // Use JCenter for resolving dependencies.
    jcenter()
    //flatDir {dirs( "C:\\Didattica2018Work\\cidemo\\unibolibs")}
    flatDir {dirs( "file:///${userDir}/unibolibs")}
    //ADDED TO ACCESS the unibo local library. If we use / does not work on ubuntu build
}

dependencies {
    // Align versions of all Kotlin components
    implementation(platform("org.jetbrains.kotlin:kotlin-bom"))

    // Use the Kotlin JDK 8 standard library.
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")

    // This dependency is used by the application.
    implementation("com.google.guava:guava:29.0-jre")

    // Use the Kotlin test library.
    testImplementation("org.jetbrains.kotlin:kotlin-test")

    // Use the Kotlin JUnit integration.
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit")

    implementation( "tuprolog:2p301" )  //ADDED TO USE the TuProlog library
}

application {
    // Define the main class for the application.
    mainClass.set("cidemo.AppKt")
}

println("userdir= $userDir  project.name=${project.name} mainClass=${application.mainClass.get()}")

//ADDED
tasks.withType<Jar> {
    manifest {
        attributes["Main-Class"] = "cidemo.AppKt"
    }
}

/*
-----------------------------------------------------------------
DOCKER-RELATED
-----------------------------------------------------------------
*/
version = "1.2"
//specify a configuration for the com.palantir.docker plugin to build the image
docker{
    //name="hub.docker.com/natbodocker/cidemo:1.0"
    name="${project.name}:${project.version}"
    files("${userDir}/app/build/distributions/app-1.2.tar", "${userDir}/demo0.pl", "${userDir}/sysRules.pl")
    /*
    The files property specifies which files should be available to our Dockerfile,
    as by default nothing is exposed.
    Under the hood, the plugin copies these files into a temporary directory,
    exposing only these files to the docker build command.
    */
    tag("DockerHub", "natbodocker/cidemoapp:${project.version}")
    /*
    the DockerHub string we put in the tag configuration is used to dynamically generate
    the tasks
        dockerTagDockerHub
        dockerPushDockerHub
    */
}

dockerRun{
    name    =  "${project.name}"
    //image   = "${project.name}:${project.version}"
    image   = "natbodocker/cidemoapp:${project.version}"
    command("/bin/bash")
    arguments( "-it")
    clean= true
}

/*
See https://github.com/palantir/gradle-docker
See https://docs.docker.com/engine/reference/run/
dockerRun {
    name 'my-container'
    image 'busybox'
    volumes 'hostvolume': '/containervolume'
    ports '7080:5000'
    daemonize true
    env 'MYVAR1': 'MYVALUE1', 'MYVAR2': 'MYVALUE2'
    command 'sleep', '100'
    arguments '--hostname=custom', '-P'
}
 */


